/* Styles for all content in the scrolling brick path view */

#vertFullPathContainer {
    display: flex;
    flex-direction: column;
    width: 100%;
}
.vertScrollButtonContainer {
    display: flex;
    align-items: center;
    padding: 0 5px;
    justify-content: center;
}
.vertScrollButton {
    border-radius: 50%;
    background-color: #eee;
    margin: 5px;
    width: 40px;
    height: 40px;
    font-size: 30px;
    border: unset;
}
.vertScrollButton:hover {
    background-color: #ccc;
    cursor: pointer;
}
#topScroll {
    transform: rotate(180deg) translateX(-3px);
}
#bottomScroll {
    transform: rotate(0deg)  translateX(-3px);
}

#vertScrollContainer {
    padding: 20px 10px;
    border: var(--brick-red) solid 10px;
    border-left: unset;
    border-right: unset;
    margin: 0 auto 40px auto;
    width: calc(100vw - 20px);
    height: 70vh;
    overflow-y: scroll;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* Internet Explorer 10+ */
    overflow-x:hidden;
    display: flex;
    flex-direction: row;
    justify-content: center;
}

/* Hide scrollbar for Chrome, Safari and Opera */
#vertScrollContainer::-webkit-scrollbar {
    display: none;
}

/* PANELS */
#vertPanelsContainer {
    display: flex;
    flex-direction: column;
    gap: 54px;
    margin-left: 10px;
    height: fit-content;
    padding-top: 450px;
}
.vertPanel {
    padding: 5px;
    border: 1px solid black;
    background-color: lightyellow;
    writing-mode: vertical-rl;
    text-orientation: mixed;
}
.vertPanel > p {
    margin: 5px;
}
.vertPanel:hover {
    cursor: zoom-in;
    background-color: #e0e0e0;
}

/* PATH */
#vertPath {
    height: fit-content;
    display: flex;
    flex-direction: row;
}
.vertPathGutter {
    width: 10px;
    margin-left: 5px;
    margin-right: 5px;
    background-color: #555;
}
.vertBrickColumn {
    width: 18px;
}
.topShiftColumn {
    margin-top: -15px;
}
.bottomShiftColumn {
    margin-top: 15px;
}

.vertBrick {
    background-image: var(--noise);
    background-color: #d9d9d9;
    margin-bottom: -2px;
    display: block;
    border: 2px solid black;
    height: 55.45px;
    width: 19px;
    z-index: 1;
}
.existingBrick {
    background-color: var(--brick-red);
    position: relative;
    z-index: 1;
}
.clickedBrick {
    background-color: red;
    z-index: 5 !important;
}

.popupTextVert {
    display: none;
    width: 200px;
    background-color: grey;
    color: #fff;
    text-align: left;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 10;
    bottom: 150%;
    left: 50%;
    transform: translateX(-50%);
}
.popupTextVertTop {
    bottom: auto;
    top: 150%;
}
.popupTextVert::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: grey transparent transparent transparent;
}
.popupTextVertTop::after {
    top: auto;
    bottom: 100%;
    border-color: transparent transparent grey transparent;
}
.existingBrick.previewing .popupTextVert {
    display: block;
}
.existingBrick.previewing {
    background-color: #f00;
    cursor: pointer;
    z-index: 5;
}
.clickedBrick {
    background-color: red;
}

#vertImageModal {
    position: fixed;
    z-index: 100;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.9);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    animation: fadeIn 0.3s;
}
.vertModalText {
    color: #fff;
    font-size: 20px;
    margin-bottom: 20px;
}
.vertModalImage {
    max-width: 90%;
    max-height: 90%;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.3);
    animation: zoomIn 0.3s;
}

.close-modal {
    position: absolute;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.3s ease;
}

.close-modal:hover {
    color: #bbb;
}

@keyframes fadeIn {
    from {opacity: 0}
    to {opacity: 1}
}

@keyframes zoomIn {
    from {transform: scale(0.9)}
    to {transform: scale(1)}
}
